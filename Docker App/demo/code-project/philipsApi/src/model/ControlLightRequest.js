/**
 * Phillips
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControlLightRequest model module.
 * @module model/ControlLightRequest
 * @version 1.0
 */
class ControlLightRequest {
    /**
     * Constructs a new <code>ControlLightRequest</code>.
     * @alias module:model/ControlLightRequest
     */
    constructor() { 
        
        ControlLightRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ControlLightRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControlLightRequest} obj Optional instance to populate.
     * @return {module:model/ControlLightRequest} The populated <code>ControlLightRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControlLightRequest();

            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('power')) {
                obj['power'] = ApiClient.convertToType(data['power'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('brightness')) {
                obj['brightness'] = ApiClient.convertToType(data['brightness'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} deviceId
 */
ControlLightRequest.prototype['deviceId'] = undefined;

/**
 * @member {module:model/ControlLightRequest.PowerEnum} power
 */
ControlLightRequest.prototype['power'] = undefined;

/**
 * @member {String} color
 */
ControlLightRequest.prototype['color'] = undefined;

/**
 * @member {Number} brightness
 */
ControlLightRequest.prototype['brightness'] = undefined;





/**
 * Allowed values for the <code>power</code> property.
 * @enum {String}
 * @readonly
 */
ControlLightRequest['PowerEnum'] = {

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};



export default ControlLightRequest;

