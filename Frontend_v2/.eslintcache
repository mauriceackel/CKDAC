[{"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/index.tsx":"1","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/serviceWorker.ts":"2","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/App.tsx":"3","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/config.ts":"4","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/Home.tsx":"5","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/SignIn.tsx":"6","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/ValidatedInput.tsx":"7","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/auth/authservice.ts":"8","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/hooks/useQuery.ts":"9","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/SignUp.tsx":"10","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/auth/authcontext.tsx":"11","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/AccountPopover.tsx":"12","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/userservice.ts":"13","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/UserIcon.tsx":"14","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/ChevronRightIcon.tsx":"15","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/LogoutIcon.tsx":"16","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/SettingsIcon.tsx":"17","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/Account.tsx":"18","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/InterfaceEditor.tsx":"19","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/apiservice.ts":"20","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/models/ApiModel.ts":"21","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/JsonEditor.tsx":"22","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/apiSelection.ts":"23","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/swaggerParser.ts":"24","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/ClearIcon.tsx":"25","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/AddIcon.tsx":"26","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/mappingservice.ts":"27","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/toTree.ts":"28","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/models/MappingModel.ts":"29","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/contexts/MappingContext.tsx":"30","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingContainer.tsx":"31","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingArea.tsx":"32","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/SchemaTree.tsx":"33","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingTransformationEditor.tsx":"34","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/escapeJsonata.ts":"35","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/CheckIcon.tsx":"36","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingTest.tsx":"37","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/stringIfiedToJsonata.ts":"38","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Spinner.tsx":"39","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/adapterservice.ts":"40","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/download.ts":"41","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/InfoModal.tsx":"42","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/MappingEditor.tsx":"43","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/get-inputs.js":"44","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/utils.js":"45","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/datetime.js":"46","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/parser.js":"47","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/functions.js":"48","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/signature.js":"49","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/PrivateRoute.tsx":"50","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/OpenApiMappingCreator.tsx":"51","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/AsyncApiMappingCreator.tsx":"52","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/asyncApiParser.ts":"53","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/ActionBar.tsx":"54","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/schemaHelpers.ts":"55","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/hooks/usePrompt.tsx":"56"},{"size":430,"mtime":1616161330406,"results":"57","hashOfConfig":"58"},{"size":5308,"mtime":1613819202796,"results":"59","hashOfConfig":"58"},{"size":4088,"mtime":1616420024870,"results":"60","hashOfConfig":"58"},{"size":330,"mtime":1613820211948,"results":"61","hashOfConfig":"58"},{"size":1580,"mtime":1613840170686,"results":"62","hashOfConfig":"58"},{"size":2809,"mtime":1615046118230,"results":"63","hashOfConfig":"58"},{"size":740,"mtime":1613829963800,"results":"64","hashOfConfig":"58"},{"size":2440,"mtime":1613840685521,"results":"65","hashOfConfig":"58"},{"size":675,"mtime":1613830490716,"results":"66","hashOfConfig":"58"},{"size":3250,"mtime":1615046134348,"results":"67","hashOfConfig":"58"},{"size":5114,"mtime":1616164090895,"results":"68","hashOfConfig":"58"},{"size":2847,"mtime":1616151853728,"results":"69","hashOfConfig":"58"},{"size":571,"mtime":1613839999627,"results":"70","hashOfConfig":"58"},{"size":515,"mtime":1613840084525,"results":"71","hashOfConfig":"58"},{"size":482,"mtime":1613840127663,"results":"72","hashOfConfig":"58"},{"size":541,"mtime":1613840108742,"results":"73","hashOfConfig":"58"},{"size":1090,"mtime":1613840331555,"results":"74","hashOfConfig":"58"},{"size":3842,"mtime":1615035849482,"results":"75","hashOfConfig":"58"},{"size":5930,"mtime":1616514858084,"results":"76","hashOfConfig":"58"},{"size":1332,"mtime":1616415009412,"results":"77","hashOfConfig":"58"},{"size":599,"mtime":1616414775782,"results":"78","hashOfConfig":"58"},{"size":862,"mtime":1615649397617,"results":"79","hashOfConfig":"58"},{"size":724,"mtime":1615914475218,"results":"80","hashOfConfig":"58"},{"size":9619,"mtime":1616414826136,"results":"81","hashOfConfig":"58"},{"size":685,"mtime":1614438507859,"results":"82","hashOfConfig":"58"},{"size":472,"mtime":1614435705019,"results":"83","hashOfConfig":"58"},{"size":5928,"mtime":1617033351191,"results":"84","hashOfConfig":"58"},{"size":594,"mtime":1614452242409,"results":"85","hashOfConfig":"58"},{"size":997,"mtime":1616429183379,"results":"86","hashOfConfig":"58"},{"size":4772,"mtime":1617023443120,"results":"87","hashOfConfig":"58"},{"size":8206,"mtime":1617029110990,"results":"88","hashOfConfig":"58"},{"size":6477,"mtime":1615153891025,"results":"89","hashOfConfig":"58"},{"size":4464,"mtime":1616519454070,"results":"90","hashOfConfig":"58"},{"size":4099,"mtime":1615129890151,"results":"91","hashOfConfig":"58"},{"size":393,"mtime":1615127290925,"results":"92","hashOfConfig":"58"},{"size":679,"mtime":1615148218737,"results":"93","hashOfConfig":"58"},{"size":5127,"mtime":1616511267862,"results":"94","hashOfConfig":"58"},{"size":314,"mtime":1615641494627,"results":"95","hashOfConfig":"58"},{"size":661,"mtime":1615653525309,"results":"96","hashOfConfig":"58"},{"size":575,"mtime":1615653158182,"results":"97","hashOfConfig":"58"},{"size":283,"mtime":1615654712494,"results":"98","hashOfConfig":"58"},{"size":1232,"mtime":1617029097808,"results":"99","hashOfConfig":"58"},{"size":13416,"mtime":1617027694232,"results":"100","hashOfConfig":"58"},{"size":76959,"mtime":1615918933846,"results":"101","hashOfConfig":"58"},{"size":6077,"mtime":1615916944897,"results":"102","hashOfConfig":"58"},{"size":56307,"mtime":1615916906255,"results":"103","hashOfConfig":"58"},{"size":54880,"mtime":1615916933354,"results":"104","hashOfConfig":"58"},{"size":68905,"mtime":1615916919285,"results":"105","hashOfConfig":"58"},{"size":13930,"mtime":1615916939053,"results":"106","hashOfConfig":"58"},{"size":1265,"mtime":1616152752927,"results":"107","hashOfConfig":"58"},{"size":28093,"mtime":1616419978375,"results":"108","hashOfConfig":"58"},{"size":26969,"mtime":1617033530861,"results":"109","hashOfConfig":"58"},{"size":4454,"mtime":1616426456114,"results":"110","hashOfConfig":"58"},{"size":2104,"mtime":1616408498025,"results":"111","hashOfConfig":"58"},{"size":818,"mtime":1616413185687,"results":"112","hashOfConfig":"58"},{"size":1593,"mtime":1617028550875,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"fbnpge",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"116"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"116"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"116"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"116"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"116"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"116"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/index.tsx",[],["244","245","246","247","248","249"],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/serviceWorker.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/App.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/config.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/Home.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/SignIn.tsx",["250"],"import ValidatedInput from 'components/ValidatedInput';\nimport React, { ReactElement, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { signIn } from 'services/auth/authservice';\nimport useQuery from 'utils/hooks/useQuery';\nimport { useHistory, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { getUser } from 'services/userservice';\nimport { AuthContext } from 'services/auth/authcontext';\n\n// #region Form Validation\nconst SignInSchema = yup.object({\n  email: yup\n    .string()\n    .required('Email is required')\n    .email('Email has a wrong format'),\n  password: yup.string().required('Password is required'),\n});\n\ntype SignInData = yup.InferType<typeof SignInSchema>;\n// #endregion\n\nfunction SignIn(): ReactElement {\n  const { returnUrl } = useQuery<{ returnUrl: string }>();\n  const { authStateChanged } = useContext(AuthContext);\n  const history = useHistory();\n  const location = useLocation();\n\n  const { register, handleSubmit, errors, setError } = useForm({\n    resolver: yupResolver(SignInSchema),\n  });\n\n  async function handleSignIn(signInData: SignInData) {\n    try {\n      const userId = await signIn(signInData.email, signInData.password);\n      const user = await getUser(userId);\n      authStateChanged(user);\n\n      if (returnUrl) {\n        history.push(returnUrl);\n      } else {\n        history.push('/');\n      }\n    } catch (err) {\n      console.log(err);\n      setError('signin', {\n        type: 'manual',\n        message: 'Wrong email address or password',\n      });\n    }\n  }\n\n  return (\n    <div className=\"content-page flex flex-col items-center\">\n      <form\n        noValidate\n        onSubmit={handleSubmit(handleSignIn)}\n        className=\"mt-4 flex flex-col shadow-lg p-8 rounded small-form\"\n      >\n        <p className=\"font-bold text-sm\">Email</p>\n        <ValidatedInput name=\"email\" register={register} errors={errors}>\n          <input type=\"email\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Password</p>\n        <ValidatedInput name=\"password\" register={register} errors={errors}>\n          <input type=\"password\" className=\"input\" />\n        </ValidatedInput>\n\n        {errors.signin && (\n          <p className=\"text-sm text-red-600\">{errors.signin.message}</p>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"mt-4 button shadow-lg bg-red-900 text-white\"\n        >\n          Sign In\n        </button>\n\n        <Link\n          to={`/signup/${location.search ?? ''}`}\n          className=\"mt-4 text-center button shadow-lg bg-red-900 text-white\"\n        >\n          Sign Up\n        </Link>\n      </form>\n    </div>\n  );\n}\n\nexport default SignIn;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/ValidatedInput.tsx",["251"],"/* eslint-disable react/require-default-props */\nimport React, { ReactElement } from 'react';\nimport { DeepMap, FieldError } from 'react-hook-form';\n\ntype ValidatedInputProps<T = Record<string, unknown>> = {\n  name: keyof T & string;\n  register: any;\n  errors?: DeepMap<T, FieldError> &\n    DeepMap<Record<string, unknown>, FieldError>;\n  children: ReactElement;\n};\n\nfunction ValidatedInput<T extends Record<string, unknown>>(\n  props: ValidatedInputProps<T>,\n): ReactElement {\n  const { name, register, errors, children: child } = props;\n\n  return (\n    <>\n      {React.cloneElement(child, { name, ref: register })}\n      <p className=\"h-4 text-sm text-red-600\">{errors?.[name]?.message}</p>\n    </>\n  );\n}\n\nexport default ValidatedInput;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/auth/authservice.ts",["252","253","254","255","256"],"import axios from 'axios';\nimport { AUTH_BASE_URL } from 'config';\nimport ApiResponse from 'models/ApiResponse';\nimport { UserModel } from 'models/UserModel';\nimport jwtDecode from 'jwt-decode';\nimport { getUser } from 'services/userservice';\n\ntype TokenResponse = ApiResponse<{\n  accessToken: string;\n  refreshToken: string;\n}>;\n\nexport async function signIn(email: string, password: string): Promise<string> {\n  try {\n    const authResult = await axios.post<TokenResponse>(\n      `${AUTH_BASE_URL}/auth`,\n      {\n        email,\n        password,\n      },\n    );\n\n    const { accessToken, refreshToken } = authResult.data.result;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n\n    const { userId } = jwtDecode(accessToken) as { userId: string };\n    return userId;\n  } catch (err) {\n    console.log(err);\n    throw new Error('Authentication error');\n  }\n}\n\nexport async function signUp(userData: UserModel): Promise<void> {\n  try {\n    await axios.post<ApiResponse<void>>(`${AUTH_BASE_URL}/register`, userData);\n  } catch (err) {\n    console.log(err);\n    throw new Error('Signup error');\n  }\n}\n\nexport async function signOut(): Promise<void> {\n  try {\n    await axios.post<ApiResponse<void>>(`${AUTH_BASE_URL}/logout`);\n  } catch (err) {\n    console.log(err);\n    throw new Error('Logout error');\n  } finally {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n}\n\nexport function getSignedInUserId(): string | undefined {\n  const accessToken = localStorage.getItem('accessToken');\n\n  if (!accessToken) {\n    return undefined;\n  }\n\n  const { userId } = jwtDecode(accessToken) as { userId: string };\n\n  return userId;\n}\n\nexport async function refreshAccessToken(): Promise<{\n  accessToken: string;\n  refreshToken: string;\n}> {\n  const currentRefreshToken = localStorage.getItem('refreshToken');\n\n  try {\n    const refreshResult = await axios.post<TokenResponse>(\n      `${AUTH_BASE_URL}/renew`,\n      undefined,\n      {\n        headers: {\n          Authorization: `Bearer ${currentRefreshToken}`,\n        },\n      },\n    );\n\n    const { accessToken, refreshToken } = refreshResult.data.result;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n\n    return refreshResult.data.result;\n  } catch (err) {\n    console.log(err);\n    throw new Error('Token refresh error');\n  }\n}\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/hooks/useQuery.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/SignUp.tsx",["257"],"import ValidatedInput from 'components/ValidatedInput';\nimport React, { ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { signUp } from 'services/auth/authservice';\nimport { useHistory, useLocation } from 'react-router';\n\n// #region Form Validation\nconst SignUpSchema = yup.object({\n  email: yup\n    .string()\n    .required('Email is required')\n    .email('Email has a wrong format'),\n  firstname: yup.string().required('First name is required'),\n  lastname: yup.string().required('Last name is required'),\n  password: yup\n    .string()\n    .min(8, 'Password is too short')\n    .required('Password is required'),\n  passwordConfirm: yup.string().test({\n    name: 'mismatch',\n    test: (value, context) => context.parent.password === value,\n    message: \"Passwords don't match\",\n  }),\n});\ntype SignUpData = yup.InferType<typeof SignUpSchema>;\n// #endregion\n\nfunction SignUp(): ReactElement {\n  const history = useHistory();\n  const location = useLocation();\n\n  const { register, handleSubmit, errors, setError } = useForm({\n    resolver: yupResolver(SignUpSchema),\n  });\n\n  async function handleSignUp(signUpData: SignUpData) {\n    try {\n      const { passwordConfirm, ...userData } = signUpData;\n\n      await signUp(userData);\n\n      history.push(`/signin/${location.search ?? ''}`);\n    } catch (err) {\n      console.log(err);\n      setError('signup', {\n        type: 'manual',\n        message: 'An error occurred. Please try again later.',\n      });\n    }\n  }\n\n  return (\n    <div className=\"content-page flex flex-col items-center\">\n      <form\n        noValidate\n        onSubmit={handleSubmit(handleSignUp)}\n        className=\"mt-4 flex flex-col shadow-lg p-8 rounded small-form\"\n      >\n        <p className=\"font-bold text-sm\">First Name</p>\n        <ValidatedInput name=\"firstname\" register={register} errors={errors}>\n          <input type=\"text\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Last Name</p>\n        <ValidatedInput name=\"lastname\" register={register} errors={errors}>\n          <input type=\"test\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Email</p>\n        <ValidatedInput name=\"email\" register={register} errors={errors}>\n          <input type=\"email\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Password</p>\n        <ValidatedInput name=\"password\" register={register} errors={errors}>\n          <input type=\"password\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Password Confirmation</p>\n        <ValidatedInput\n          name=\"passwordConfirm\"\n          register={register}\n          errors={errors}\n        >\n          <input type=\"password\" className=\"input\" />\n        </ValidatedInput>\n\n        {errors.signup && (\n          <p className=\"text-sm text-red-600\">{errors.signup.message}</p>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"mt-4 button shadow-lg bg-red-900 text-white\"\n        >\n          Sign Up\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default SignUp;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/auth/authcontext.tsx",["258"],"import React, {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { UserModel } from 'models/UserModel';\nimport { getUser } from 'services/userservice';\nimport axios from 'axios';\nimport { AUTH_BASE_URL } from 'config';\nimport { getSignedInUserId, refreshAccessToken } from './authservice';\n\ntype AuthSate = { user?: UserModel; loading: boolean };\nconst initialState: AuthSate = {\n  user: undefined,\n  loading: true,\n};\n\nconst AuthContext = React.createContext<{\n  authState: AuthSate;\n  authStateChanged: (user: UserModel | undefined) => void;\n}>({\n  authState: initialState,\n  authStateChanged: () => {},\n});\n\nfunction AuthProvider({ children }: PropsWithChildren<unknown>): ReactElement {\n  const [authState, setAuthState] = useState(initialState);\n\n  const authStateChanged = (user: UserModel | undefined) => {\n    setAuthState({ user, loading: false });\n  };\n\n  // #region Request interceptors\n  const refreshInProgress = useRef<boolean>(false);\n  const requestQueue = useRef<\n    { resolve: (accessToken: string) => void; reject: (reason?: any) => void }[]\n  >([]);\n\n  const addAccessTokenInterceptor = useCallback(\n    () =>\n      axios.interceptors.request.use((request) => {\n        if (request.headers.Authorization) {\n          return request;\n        }\n\n        // If authorization header is not set, add access token\n        const accessToken = localStorage.getItem('accessToken');\n        request.headers.Authorization = `Bearer ${accessToken}`;\n\n        return request;\n      }),\n    [],\n  );\n\n  const addRefreshInterceptor = useCallback(\n    () =>\n      axios.interceptors.response.use(undefined, async (error) => {\n        const originalRequest = error.config;\n\n        if (\n          error.response?.status === 401 &&\n          !originalRequest.isRetry &&\n          originalRequest.url !== `${AUTH_BASE_URL}/renew`\n        ) {\n          // We received an error but we are already refreshing the token initiated by an earlier request\n          if (refreshInProgress.current) {\n            // Queue the request and wait for the first refresh request to finish\n\n            const awaiter = new Promise<string>((resolve, reject) =>\n              // We add the promise methods to the queue so we can resolve this promise later\n              requestQueue.current.push({ resolve, reject }),\n            );\n\n            return awaiter.then((accessToken) =>\n              axios({\n                ...originalRequest,\n                isRetry: true,\n                headers: {\n                  ...originalRequest.headers,\n                  Authorization: `Bearer ${accessToken}`,\n                },\n              }),\n            );\n          }\n\n          // This is the first 401 we get so we try to refresh the token\n          try {\n            refreshInProgress.current = true;\n\n            const { accessToken } = await refreshAccessToken();\n\n            // Refreshing the token succeeded, now process all potentially enqueued requests\n            requestQueue.current.forEach((request) =>\n              request.resolve(accessToken),\n            );\n\n            // Set flag in order to not end up in endless loop\n            originalRequest.isRetry = true;\n            // Update access token so that next request will succeed\n            originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n\n            // Retry request\n            return axios(originalRequest);\n          } catch (err) {\n            // We had an error refreshing the token\n\n            // Remove the user as he/she is not signed in anymore\n            authStateChanged(undefined);\n\n            // Also reject all waiting requests\n            requestQueue.current.forEach((request) => request.reject(err));\n\n            return Promise.reject(err);\n          } finally {\n            refreshInProgress.current = false;\n            requestQueue.current = [];\n          }\n        }\n\n        // If the error was not a 401 or we already retried, return the error\n        return Promise.reject(error);\n      }),\n    [],\n  );\n\n  useEffect(() => {\n    const accessTokenInterceptorId = addAccessTokenInterceptor();\n    const refreshInterceptorId = addRefreshInterceptor();\n\n    return () => {\n      axios.interceptors.request.eject(accessTokenInterceptorId);\n      axios.interceptors.request.eject(refreshInterceptorId);\n    };\n  }, [addAccessTokenInterceptor, addRefreshInterceptor]);\n  // #endregion\n\n  // #region Load user\n  useEffect(() => {\n    const userId = getSignedInUserId();\n\n    if (!userId) {\n      return;\n    }\n\n    getUser(userId)\n      .then((user) =>\n        setAuthState((current) => ({\n          ...current,\n          user,\n          loading: false,\n        })),\n      )\n      .catch(() =>\n        setAuthState((current) => ({\n          ...current,\n          user: undefined,\n          loading: false,\n        })),\n      );\n  }, []);\n  // #endregion\n\n  return (\n    <AuthContext.Provider\n      value={{\n        authState,\n        authStateChanged,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthProvider, AuthContext };\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/AccountPopover.tsx",["259","260","261"],"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { UserModel } from 'models/UserModel';\nimport React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router';\nimport { Popover } from 'react-tiny-popover';\nimport { AuthContext } from 'services/auth/authcontext';\nimport { signOut } from 'services/auth/authservice';\nimport LogoutIcon from './Icons/LogoutIcon';\nimport SettingsIcon from './Icons/SettingsIcon';\n\ntype AccountPopoverProps = {\n  children: ReactElement;\n};\nfunction AccountPopover(props: AccountPopoverProps): ReactElement {\n  const { children: child } = props;\n\n  const {\n    authState: { user },\n  } = useContext(AuthContext);\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  function handleClick() {\n    if (!user && !pathname.startsWith('/signin/')) {\n      history.push(`/signin/?returnUrl=${encodeURIComponent(pathname)}`);\n      return;\n    }\n\n    setIsOpen((curr) => !curr);\n  }\n\n  useEffect(() => {\n    if (isOpen && !user) {\n      setIsOpen(false);\n    }\n  }, [user, isOpen]);\n\n  return (\n    <Popover\n      isOpen={isOpen}\n      onClickOutside={() => setIsOpen(false)}\n      align=\"end\"\n      containerClassName=\"z-50\"\n      positions={['bottom']}\n      content={<AccountPopoverContent />}\n    >\n      {React.cloneElement(child, { onClick: handleClick })}\n    </Popover>\n  );\n}\n\n// #region Account Popover content\nfunction AccountPopoverContent(): ReactElement {\n  const history = useHistory();\n  const {\n    authState: { user },\n    authStateChanged,\n  } = useContext(AuthContext);\n\n  async function handleSignOut() {\n    try {\n      await signOut();\n      authStateChanged(undefined);\n\n      history.push('/');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className=\"relative flex flex-col rounded bg-green-800 p-8 shadow-2xl text-white\">\n      <div className=\"absolute rounded-sm right-2 -top-2 bg-green-800 w-6 h-6 transform rotate-45\" />\n      <h1 className=\"text-2xl\">\n        {user?.firstname} {user?.lastname}\n      </h1>\n      <h2 className=\"text-lg\">{user?.email}</h2>\n      <div className=\"flex mt-2\">\n        <button\n          type=\"button\"\n          className=\"flex items-center button shadow-lg bg-white text-green-800 mr-1\"\n          onClick={() => history.push('/account/')}\n        >\n          <SettingsIcon className=\"w-5 h-5 mr-2\" />\n          Settings\n        </button>\n        <button\n          type=\"button\"\n          className=\"flex items-center button shadow-lg bg-white text-green-800 ml-1\"\n          onClick={handleSignOut}\n        >\n          <LogoutIcon className=\"w-5 h-5 mr-2\" />\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n}\n// #endregion\n\nexport default AccountPopover;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/userservice.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/UserIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/ChevronRightIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/LogoutIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/SettingsIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/Account.tsx",["262","263"],"import ValidatedInput from 'components/ValidatedInput';\nimport React, { ReactElement, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { getUser, updateUser } from 'services/userservice';\nimport { AuthContext } from 'services/auth/authcontext';\n\n// #region Form Validation\nconst UserSchema = yup.object({\n  email: yup\n    .string()\n    .required('Email is required')\n    .email('Email has a wrong format'),\n  password: yup.string().test({\n    name: 'null_or_min',\n    test: (val) => !val || val.length >= 8,\n  }),\n  passwordConfirm: yup.string().test({\n    name: 'mismatch',\n    test: (value, context) =>\n      !context.parent.password || context.parent.password === value,\n    message: \"Passwords don't match\",\n  }),\n  firstname: yup.string().required('First name is required'),\n  lastname: yup.string().required('Last name is required'),\n});\n\ntype UserData = yup.InferType<typeof UserSchema>;\n// #endregion\n\nfunction SignIn(): ReactElement {\n  const {\n    authState: { user },\n    authStateChanged,\n  } = useContext(AuthContext);\n\n  const { register, handleSubmit, errors, setError } = useForm({\n    resolver: yupResolver(UserSchema),\n  });\n\n  async function handleUpdate(userData: UserData) {\n    if (!user) {\n      return;\n    }\n\n    try {\n      await updateUser({\n        id: user.id,\n        email: userData.email,\n        firstname: userData.firstname,\n        lastname: userData.lastname,\n        ...(userData.password ? { password: userData.password } : null),\n      });\n      const updatedUser = await getUser(user.id!);\n      authStateChanged(updatedUser);\n\n      setError('success', {\n        type: 'manual',\n        message: 'User was updated successfully.',\n      });\n    } catch (err) {\n      console.log(err);\n      setError('error', {\n        type: 'manual',\n        message: 'An error occurred. Please try again later.',\n      });\n    }\n  }\n\n  return (\n    <div className=\"content-page flex flex-col items-center\">\n      <form\n        noValidate\n        onSubmit={handleSubmit(handleUpdate)}\n        className=\"mt-4 flex flex-col shadow-lg p-8 rounded\"\n      >\n        <p className=\"font-bold text-sm\">First Name</p>\n        <ValidatedInput name=\"firstname\" register={register} errors={errors}>\n          <input type=\"text\" className=\"input\" defaultValue={user?.firstname} />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Last Name</p>\n        <ValidatedInput name=\"lastname\" register={register} errors={errors}>\n          <input type=\"test\" className=\"input\" defaultValue={user?.lastname} />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Email</p>\n        <ValidatedInput name=\"email\" register={register} errors={errors}>\n          <input type=\"email\" className=\"input\" defaultValue={user?.email} />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Password</p>\n        <ValidatedInput name=\"password\" register={register} errors={errors}>\n          <input type=\"password\" className=\"input\" />\n        </ValidatedInput>\n        <p className=\"mt-2 font-bold text-sm\">Password Confirmation</p>\n        <ValidatedInput\n          name=\"passwordConfirm\"\n          register={register}\n          errors={errors}\n        >\n          <input type=\"password\" className=\"input\" />\n        </ValidatedInput>\n\n        {errors.error && (\n          <p className=\"text-sm text-red-600\">{errors.error.message}</p>\n        )}\n\n        {errors.success && (\n          <p className=\"text-sm text-green-600\">{errors.success.message}</p>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"mt-4 button shadow-lg bg-red-900 text-white\"\n        >\n          Update Data\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default SignIn;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/InterfaceEditor.tsx",["264","265","266"],"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, {\n  ReactElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Select from 'react-select';\nimport { ApiType } from 'models/ApiModel';\nimport { getApi, getApis, upsertApi } from 'services/apiservice';\nimport { useParams } from 'react-router';\nimport ValidatedInput from 'components/ValidatedInput';\nimport { AuthContext } from 'services/auth/authcontext';\nimport JsonEditor from 'components/JsonEditor';\nimport { ApiOption, optionFilter } from 'utils/helpers/apiSelection';\n\n// #region Form Validation\nconst ApiSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  metadata: yup.object({\n    company: yup.string(),\n    keywords: yup.string(),\n  }),\n  apiSpec: yup.mixed().required(),\n});\ntype ApiData = yup.InferType<typeof ApiSchema>;\n// #endregion\n\nfunction InterfaceEditor(): ReactElement {\n  const { user } = useContext(AuthContext).authState;\n\n  const { mode } = useParams<{ mode: string }>();\n  const apiType = useMemo(() => {\n    switch (mode) {\n      case 'openapi':\n        return ApiType.OPEN_API;\n      case 'asyncapi':\n        return ApiType.ASYNC_API;\n      default:\n        return undefined;\n    }\n  }, [mode]);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    errors,\n    reset: resetForm,\n    setError,\n  } = useForm({\n    resolver: yupResolver(ApiSchema),\n  });\n\n  // #region Load Apis\n  const [apiOptions, setApiOptions] = useState<ApiOption[]>();\n\n  const loadApis = useCallback(\n    async (type: ApiType) => {\n      if (!user) {\n        return;\n      }\n\n      try {\n        const loadedApis = await getApis(type, true, user.id);\n\n        setApiOptions(\n          loadedApis.map((api) => ({\n            value: api,\n            label: api.name,\n          })),\n        );\n      } catch (err) {\n        console.log('Error loading apis', err);\n      }\n    },\n    [user],\n  );\n\n  useEffect(() => {\n    if (apiType !== undefined) {\n      loadApis(apiType);\n    }\n  }, [apiType, loadApis]);\n  // #endregion\n\n  // #region Api Selection\n  const [selectedApiOption, setSelectedApiOption] = useState<ApiOption>();\n  const selectedApi = useMemo(() => {\n    return selectedApiOption?.value;\n  }, [selectedApiOption]);\n  // #endregion\n\n  // #region Fully load selected Api\n  useEffect(() => {\n    async function loadFullApiData() {\n      if (!selectedApi) {\n        resetForm({});\n        return;\n      }\n\n      try {\n        const apiData = await getApi(selectedApi.id, false);\n\n        resetForm({\n          name: apiData.name,\n          metadata: apiData.metadata,\n          apiSpec: JSON.parse(apiData.apiSpec),\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    loadFullApiData();\n  }, [selectedApi, resetForm]);\n  // #endregion\n\n  // #region Upsert Api\n  async function handleUpsert(apiData: ApiData) {\n    if (apiType === undefined) {\n      return;\n    }\n\n    try {\n      await upsertApi({\n        ...apiData,\n        apiSpec: JSON.stringify(apiData.apiSpec),\n        id: selectedApi?.id,\n        createdBy: user?.id,\n        type: selectedApi?.type ?? apiType,\n      });\n\n      loadApis(apiType);\n      setSelectedApiOption(undefined);\n      resetForm({});\n\n      setError('success', {\n        type: 'manual',\n        message: 'API was updated successfully.',\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  // #endregion\n\n  return (\n    <div className=\"content-page flex flex-col items-center\">\n      <form\n        noValidate\n        onSubmit={handleSubmit(handleUpsert)}\n        className=\"mt-4 flex flex-col shadow-lg p-8 rounded\"\n      >\n        <p className=\"font-bold text-sm\">APIs</p>\n        <Select\n          className=\"w-full\"\n          defaultValue={selectedApiOption}\n          isSearchable\n          isClearable\n          onChange={(value) => setSelectedApiOption(value ?? undefined)}\n          options={apiOptions}\n          filterOption={optionFilter}\n        />\n\n        <p className=\"mt-4 font-bold text-sm\">Name</p>\n        <ValidatedInput name=\"name\" register={register} errors={errors}>\n          <input type=\"test\" className=\"input\" />\n        </ValidatedInput>\n\n        <p className=\"mt-2 font-bold text-sm\">Metadata</p>\n        <div className=\"flex\">\n          <div className=\"mr-1\">\n            <p className=\"font-bold text-sm\">Company</p>\n            <ValidatedInput\n              name=\"metadata.company\"\n              register={register}\n              errors={errors}\n            >\n              <input type=\"test\" className=\"input\" />\n            </ValidatedInput>\n          </div>\n          <div className=\"ml-1\">\n            <p className=\"font-bold text-sm\">Keywords</p>\n            <ValidatedInput\n              name=\"metadata.keywords\"\n              register={register}\n              errors={errors}\n            >\n              <input type=\"test\" className=\"input\" />\n            </ValidatedInput>\n          </div>\n        </div>\n\n        <p className=\"mt-2 font-bold text-sm\">Api Specification</p>\n        <div className=\"max-w-md\">\n          <Controller\n            name=\"apiSpec\"\n            control={control}\n            defaultValue={{}}\n            render={({ onChange, value }) => (\n              <JsonEditor value={value} onChange={onChange} />\n            )}\n          />\n          {errors.apiSpec && (\n            <p className=\"h-6 text-sm text-red-600\">{errors.apiSpec.message}</p>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"mt-4 button shadow-lg bg-red-900 text-white\"\n        >\n          Save\n        </button>\n        {errors.success && (\n          <p className=\"text-sm text-green-600\">{errors.success.message}</p>\n        )}\n      </form>\n    </div>\n  );\n}\n\nexport default InterfaceEditor;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/apiservice.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/models/ApiModel.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/JsonEditor.tsx",["267","268","269"],"import React, { ReactElement, useEffect, useRef } from 'react';\nimport 'jsoneditor-react/es/editor.min.css';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { JsonEditor: Editor } = require('jsoneditor-react');\n\ninterface JsonEditorProps {\n  value: any;\n  onChange?: (data: any) => void;\n  readonly?: boolean;\n}\nfunction JsonEditor(props: JsonEditorProps): ReactElement {\n  const { value, onChange = () => {}, readonly = false } = props;\n  const editorRef = useRef<any>(null);\n\n  useEffect(() => {\n    editorRef.current?.jsonEditor?.set(value);\n  }, [value]);\n\n  return (\n    <Editor\n      ref={editorRef}\n      onChange={onChange}\n      mode={readonly ? 'view' : 'text'}\n      allowedMode={[readonly ? 'view' : 'text']}\n      navigationBar={false}\n      statusBar={false}\n      mainMenuBar={false}\n    />\n  );\n}\n\nexport default JsonEditor;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/apiSelection.ts",["270","271"],"import { ApiModel } from 'models/ApiModel';\n\nexport type ApiOption = {\n  value: ApiModel;\n  label: string;\n};\n\nexport function optionFilter(\n  option: any,\n  searchText: string | undefined,\n): boolean {\n  const lowerSearch = searchText?.toLowerCase();\n\n  const { value: api } = option as { value: ApiModel };\n\n  return (\n    !lowerSearch ||\n    api.name.toLowerCase().includes(lowerSearch) ||\n    (api.metadata?.company?.toLowerCase().includes(lowerSearch) ?? false) ||\n    (api.metadata?.keywords?.toLowerCase().includes(lowerSearch) ?? false)\n  );\n}\n\nexport type OperationOption = {\n  value: { operationId: string };\n  label: string;\n};\n\nexport type ResponseOption = {\n  value: { responseId: string };\n  label: string;\n};\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/swaggerParser.ts",["272","273","274","275"],"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport SwaggerParser from '@apidevtools/swagger-parser';\nimport { OpenApiModel } from 'models/ApiModel';\nimport { OpenAPI, OpenAPIV2, OpenAPIV3 } from 'openapi-types';\nimport { flattenSchema, removeTypes, Schema } from './schemaHelpers';\n\n// #region Types & constants\nexport type OpenApiOperation = {\n  api: OpenApiModel;\n  operationId: string;\n  responseId: string;\n};\n\nexport const httpMethods = [\n  'get',\n  'post',\n  'delete',\n  'put',\n  'patch',\n  'trace',\n  'head',\n  'options',\n];\n// #endregion\n\nexport async function parseApiSpec(apiSpec: string): Promise<OpenAPI.Document> {\n  const apiSpecObject = JSON.parse(apiSpec);\n\n  return SwaggerParser.validate(apiSpecObject, { validate: { spec: false } });\n}\n\n// #region Get operations details\nfunction getOperation<T extends OpenAPIV2.Document | OpenAPIV3.Document>(\n  apiObject: T,\n  operationId: string,\n):\n  | {\n      path: T extends OpenAPIV2.Document\n        ? OpenAPIV2.PathItemObject\n        : OpenAPIV3.PathItemObject;\n      method: string;\n      pathUrl: string;\n      operation: T extends OpenAPIV2.Document\n        ? OpenAPIV2.OperationObject\n        : OpenAPIV3.OperationObject;\n    }\n  | undefined {\n  const pathObjects: [\n    string,\n    T extends OpenAPIV2.Document\n      ? OpenAPIV2.PathItemObject\n      : OpenAPIV3.PathItemObject,\n  ][] = Object.entries(apiObject.paths);\n\n  for (let i = 0; i < pathObjects.length; i += 1) {\n    const [pathUrl, pathObject] = pathObjects[i];\n    const operationObjects: [\n      string,\n      T extends OpenAPIV2.Document\n        ? OpenAPIV2.OperationObject\n        : OpenAPIV3.OperationObject,\n    ][] = Object.entries(pathObject);\n\n    for (let j = 0; j < operationObjects.length; j += 1) {\n      const [method, operationObject] = operationObjects[j];\n\n      if (operationObject.operationId === operationId) {\n        return {\n          path: pathObject,\n          pathUrl,\n          method,\n          operation: operationObject,\n        };\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function getOperationIds(apiObject: OpenAPI.Document): string[] {\n  return Object.values(apiObject.paths).flatMap(\n    (pathObject: OpenAPIV3.PathItemObject | OpenAPIV2.PathItemObject) => {\n      return Object.entries(pathObject)\n        .filter(([key]) => httpMethods.includes(key))\n        .map(([, operation]) => {\n          return operation.operationId;\n        });\n    },\n  );\n}\n\nexport function getResponseCodes(\n  apiObject: OpenAPI.Document,\n  operationId: string,\n): string[] {\n  const { operation } = getOperation(apiObject, operationId) ?? {};\n\n  if (!operation?.responses) {\n    return [];\n  }\n\n  return Object.keys(operation.responses);\n}\n// #endregion\n\n// #region Get server details\nfunction getServersV2(apiObject: OpenAPIV2.Document): string[] | undefined {\n  return apiObject.schemes?.map(\n    (scheme) => scheme + apiObject.host + apiObject.basePath,\n  );\n}\n\nfunction getServersV3(apiObject: OpenAPIV3.Document): string[] | undefined {\n  return apiObject.servers?.map((server) => {\n    return Object.entries(server.variables || []).reduce(\n      (url, [varname, value]) =>\n        url.replace(new RegExp(`{${varname}}`, 'g'), value.default),\n      server.url,\n    );\n  });\n}\n// #endregion\n\n// #region Request schema\nexport function getRequestSchema(\n  apiObject: OpenAPI.Document,\n  operationId: string,\n  ignoreOptional = false,\n): Schema | undefined {\n  const result = getOperation(apiObject, operationId);\n  if (result === undefined) {\n    return undefined;\n  }\n\n  const { path, operation } = result;\n\n  // V3\n  if (isOpenApiV3(apiObject)) {\n    const parameters = getV3Parameters(\n      path as OpenAPIV3.PathItemObject,\n      operation as OpenAPIV3.OperationObject,\n      ignoreOptional,\n    );\n    const body = getV3RequestBody(operation as OpenAPIV3.OperationObject);\n\n    return {\n      ...(parameters\n        ? {\n            parameters: removeTypes(\n              flattenSchema({ type: 'object', properties: parameters }),\n            ),\n          }\n        : null),\n      ...(body && Object.keys(body).length\n        ? { body: removeTypes(flattenSchema(body)) }\n        : null),\n    };\n  }\n\n  // V2\n  const parameters = getV2Parameters(\n    path as OpenAPIV2.PathItemObject,\n    operation as OpenAPIV2.OperationObject,\n    ignoreOptional,\n  );\n  const body = getV2RequestBody(operation as OpenAPIV2.OperationObject);\n\n  return {\n    ...(parameters\n      ? {\n          parameters: removeTypes(\n            flattenSchema({ type: 'object', properties: parameters }),\n          ),\n        }\n      : null),\n    ...(body && Object.keys(body).length\n      ? { body: removeTypes(flattenSchema(body)) }\n      : null),\n  };\n}\n\nfunction getV2Parameters(\n  pathObject: OpenAPIV2.PathItemObject,\n  operationObject: OpenAPIV2.OperationObject,\n  ignoreOptional: boolean,\n) {\n  const combinedParameters = [\n    ...(pathObject.parameters ?? []),\n    ...(operationObject.parameters ?? []),\n  ] as (OpenAPIV2.InBodyParameterObject | OpenAPIV2.GeneralParameterObject)[];\n\n  const filteredParameters = combinedParameters.filter(\n    (parameter) =>\n      parameter.in !== 'body' &&\n      (!ignoreOptional || parameter.in === 'path' || parameter.required),\n  );\n\n  if (filteredParameters.length === 0) {\n    return undefined;\n  }\n\n  return filteredParameters.reduce<Record<string, any>>(\n    (obj, parameter) => ({\n      ...obj,\n      [parameter.name]: parameter.schema,\n    }),\n    {},\n  );\n}\n\nfunction getV3Parameters(\n  pathObject: OpenAPIV3.PathItemObject,\n  operationObject: OpenAPIV3.OperationObject,\n  ignoreOptional: boolean,\n) {\n  const combinedParameters = [\n    ...(pathObject.parameters ?? []),\n    ...(operationObject.parameters ?? []),\n  ] as OpenAPIV3.ParameterObject[];\n\n  const filteredParameters = combinedParameters.filter(\n    (parameter) =>\n      parameter.in !== 'body' &&\n      (!ignoreOptional || parameter.in === 'path' || parameter.required),\n  );\n\n  if (filteredParameters.length === 0) {\n    return undefined;\n  }\n\n  return filteredParameters.reduce<Record<string, any>>(\n    (obj, parameter) => ({\n      ...obj,\n      [parameter.name]: parameter.schema,\n    }),\n    {},\n  );\n}\n\nfunction getV2RequestBody(operationObject: OpenAPIV2.OperationObject) {\n  const params = operationObject.parameters as OpenAPIV2.InBodyParameterObject[];\n  const bodyParameters = params?.filter((parameter) => parameter.in === 'body');\n\n  return {\n    type: 'object',\n    properties:\n      bodyParameters?.reduce(\n        (obj, parameter) => ({\n          ...obj,\n          [parameter.name]: parameter.schema,\n        }),\n        {},\n      ) ?? {},\n  };\n}\n\nfunction getV3RequestBody(operationObject: OpenAPIV3.OperationObject) {\n  const requestBody = operationObject.requestBody as\n    | OpenAPIV3.RequestBodyObject\n    | undefined;\n\n  return requestBody?.content?.['application/json'].schema;\n}\n// #endregion\n\n// #region Response schema\nexport function getResponseSchema(\n  apiObject: OpenAPI.Document,\n  operationId: string,\n  responseId: string,\n): Schema | undefined {\n  const result = getOperation(apiObject, operationId);\n  if (result === undefined) {\n    return undefined;\n  }\n\n  const { operation } = result;\n\n  // V3\n  if (isOpenApiV3(apiObject)) {\n    const body = getV3ResponseBody(\n      operation as OpenAPIV3.OperationObject,\n      responseId,\n    );\n\n    return removeTypes(flattenSchema(body ?? {}));\n  }\n\n  // V2\n  const body = getV2ResponseBody(\n    operation as OpenAPIV2.OperationObject,\n    responseId,\n  );\n\n  return removeTypes(flattenSchema(body));\n}\n\nfunction getV2ResponseBody(\n  operationObject: OpenAPIV2.OperationObject,\n  responseId: string,\n) {\n  const response = operationObject.responses?.[responseId] as\n    | OpenAPIV2.ResponseObject\n    | undefined;\n\n  return response?.schema;\n}\n\nfunction getV3ResponseBody(\n  operationObject: OpenAPIV3.OperationObject,\n  responseId: string,\n) {\n  const response = operationObject.responses?.[responseId] as\n    | OpenAPIV3.ResponseObject\n    | undefined;\n\n  return response?.content?.['application/json'].schema;\n}\n// #endregion\n\n// #region Request URL\nexport function getRequestUrl(\n  apiObject: OpenAPI.Document,\n  operationId: string,\n  paramValues: Record<string, string> = {},\n): { method: string; url: string } | undefined {\n  const servers = isOpenApiV3(apiObject)\n    ? getServersV3(apiObject)\n    : getServersV2(apiObject);\n  const operationResult = getOperation(apiObject, operationId);\n  console.log(servers, apiObject, operationId, operationResult);\n\n  if (!servers || servers.length === 0 || !operationResult) {\n    return undefined;\n  }\n\n  const { pathUrl, method, path, operation } = operationResult;\n  const server = servers[0];\n\n  // Get all required parameters\n  const parameters = [\n    ...(path.parameters || []),\n    ...(operation.parameters || []),\n  ] as (\n    | OpenAPIV3.ParameterObject\n    | OpenAPIV2.InBodyParameterObject\n    | OpenAPIV2.GeneralParameterObject\n  )[];\n\n  const query = parameters\n    .filter((p) => p.in === 'query')\n    .map((p) => paramValues[p.name] && `${p.name}=${paramValues[p.name]}`)\n    .filter(Boolean)\n    .join('&');\n  const urlWithParams = parameters\n    .filter((p) => p.in === 'path')\n    .reduce(\n      (currUrl, currParam) =>\n        currUrl.replace(\n          new RegExp(`{${currParam.name}}`, 'g'),\n          paramValues[currParam.name] || '',\n        ),\n      pathUrl,\n    );\n\n  return {\n    method,\n    url: `${server}${urlWithParams}${query ? `?${query}` : ''}`,\n  };\n}\n// #endregion\n\n// #region Helpers\nfunction isOpenApiV3(doc: any): doc is OpenAPIV3.Document {\n  return doc.openapi !== undefined;\n}\n// #endregion\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/ClearIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/AddIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/mappingservice.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/toTree.ts",["276","277"],"export function buildNodes(jsonObject: any, parentKey = ''): JsonTreeNode[] {\n  if (\n    jsonObject &&\n    typeof jsonObject === 'object' &&\n    !Array.isArray(jsonObject)\n  ) {\n    return Object.keys(jsonObject).map((key) => {\n      const flattenedKey = `${parentKey}${parentKey ? '.' : ''}${key}`;\n\n      return {\n        name: key,\n        key: flattenedKey,\n        children: buildNodes(jsonObject[key], flattenedKey),\n      };\n    });\n  }\n\n  return [];\n}\n\nexport interface JsonTreeNode {\n  name: string;\n  key: string;\n  children?: JsonTreeNode[];\n}\n\nexport type KeyChain = Array<string>;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/models/MappingModel.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/contexts/MappingContext.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingContainer.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingArea.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/SchemaTree.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingTransformationEditor.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/escapeJsonata.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Icons/CheckIcon.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/MappingTest.tsx",["278","279","280","281","282","283"],"import { MappingPair } from 'models/MappingModel';\nimport React, {\n  Fragment,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport jsonata from 'jsonata';\nimport { pairs2Trans } from 'services/mappingservice';\nimport stringified2Jsonata from 'utils/helpers/stringIfiedToJsonata';\nimport axios from 'axios';\nimport { getRequestUrl, OpenApiOperation } from 'utils/helpers/swaggerParser';\nimport { Collapse } from 'react-collapse';\nimport { Schema } from 'utils/helpers/schemaHelpers';\nimport JsonEditor from './JsonEditor';\nimport ChevronRightIcon from './Icons/ChevronRightIcon';\n\ninterface MappingTestProps {\n  requestMappingPairs: MappingPair[];\n  responseMappingPairs: MappingPair[];\n  sourceRequestSchema?: Schema;\n  targetOperations?: Record<string, OpenApiOperation>;\n}\nfunction MappingTest(props: MappingTestProps): ReactElement {\n  const {\n    requestMappingPairs,\n    responseMappingPairs,\n    sourceRequestSchema,\n    targetOperations,\n  } = props;\n\n  const [expanded, setExpanded] = useState<boolean>(false);\n\n  const [requestData, setRequestData] = useState<any>({});\n  useEffect(() => setRequestData(sourceRequestSchema ?? {}), [\n    sourceRequestSchema,\n  ]);\n  const [responseData, setResponseData] = useState<any>({});\n\n  const [logs, setLogs] = useState<string[]>();\n  const [error, setError] = useState<string>();\n\n  // #region Execute request\n  const executeRequest = useCallback(async () => {\n    setError(undefined);\n    setLogs(undefined);\n\n    try {\n      const requestMapping = pairs2Trans(requestMappingPairs);\n      const requestMappingString = stringified2Jsonata(\n        JSON.stringify(requestMapping),\n      );\n\n      const targetsRequestData: Record<string, any> = jsonata(\n        requestMappingString,\n      ).evaluate(requestData);\n\n      const targetResponseData: Record<string, any> = {};\n      const promises = Object.entries(targetsRequestData).map(\n        async ([targetOperationId, targetRequestData]) => {\n          if (\n            targetOperations?.[targetOperationId]?.api.apiObject === undefined\n          ) {\n            return;\n          }\n\n          const urlResponse = getRequestUrl(\n            targetOperations[targetOperationId].api.apiObject!,\n            targetOperations[targetOperationId].operationId,\n            targetRequestData.parameters,\n          );\n\n          if (!urlResponse) {\n            return;\n          }\n\n          const { method, url } = urlResponse;\n\n          setLogs((currentLogs) => [\n            ...(currentLogs || []),\n            `Querying endpoint at: ${url}`,\n          ]);\n          targetResponseData[targetOperationId] = await axios\n            .request({\n              method: method as any,\n              url,\n              data: targetRequestData.body,\n              responseType: 'json',\n            })\n            .then((r) => r.data);\n        },\n      );\n\n      await Promise.all(promises);\n\n      const responseMapping = pairs2Trans(responseMappingPairs);\n      const responseMappingString = stringified2Jsonata(\n        JSON.stringify(responseMapping),\n      );\n      const sourceResponseData = jsonata(responseMappingString).evaluate(\n        targetResponseData,\n      );\n\n      setResponseData(sourceResponseData);\n    } catch (err) {\n      const message = `An error occurred during your request: ${err.message}.${\n        err.value ? ` Received value: ${JSON.stringify(err.value)}` : ''\n      }`;\n\n      setError(message);\n      setResponseData({});\n    }\n  }, [\n    requestData,\n    requestMappingPairs,\n    responseMappingPairs,\n    targetOperations,\n  ]);\n  // #endregion\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"divider relative mt-4\"\n        onClick={() => setExpanded((curr) => !curr)}\n      >\n        Test Request\n        <ChevronRightIcon\n          className={`absolute w-5 h-5 right-4 transition-all transform ${\n            expanded ? '-rotate-90' : 'rotate-90'\n          } `}\n        />\n      </button>\n\n      <Collapse isOpened={expanded}>\n        <div className=\"flex flex-col pt-2\">\n          <div className=\"flex\">\n            <div className=\"w-1/2 mr-1\">\n              Request Data\n              <JsonEditor value={requestData} onChange={setRequestData} />\n            </div>\n            <div className=\"w-1/2 ml-1\">\n              Response Data\n              <JsonEditor value={responseData} readonly />\n            </div>\n          </div>\n\n          {logs && (\n            <div className=\"text-green-600\">\n              Logs:\n              <br />\n              {logs.map((line) => (\n                <Fragment key=\"line\">\n                  {line}\n                  <br />\n                </Fragment>\n              ))}\n            </div>\n          )}\n          {error && <div className=\"text-red-600\">{error}</div>}\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"button\"\n              className=\"button bg-red-900 text-white\"\n              onClick={executeRequest}\n            >\n              Execute\n            </button>\n          </div>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nexport default MappingTest;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/stringIfiedToJsonata.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/Spinner.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/services/adapterservice.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/download.ts",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/InfoModal.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/MappingEditor.tsx",["284","285","286","287","288","289","290","291","292","293"],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/get-inputs.js",[],["294","295","296","297","298","299"],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/utils.js",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/datetime.js",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/parser.js",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/functions.js",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/get-inputs/signature.js",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/PrivateRoute.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/OpenApiMappingCreator.tsx",["300","301","302","303"],"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport AddIcon from 'components/Icons/AddIcon';\nimport ClearIcon from 'components/Icons/ClearIcon';\nimport MappingContainer from 'components/MappingContainer';\nimport { MappingContextProvider } from 'contexts/MappingContext';\nimport { ApiType, OpenApiModel } from 'models/ApiModel';\nimport {\n  MappingPair,\n  MappingType,\n  OpenApiMappingModel,\n} from 'models/MappingModel';\nimport React, {\n  ReactElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport Select from 'react-select';\nimport { getApi, getApis } from 'services/apiservice';\nimport { AuthContext } from 'services/auth/authcontext';\nimport {\n  createMapping,\n  generateMapping,\n  getMappedOperations,\n  MappedOperations,\n  pairs2Trans,\n  recomputeAttributeMapping,\n} from 'services/mappingservice';\nimport {\n  ApiOption,\n  ResponseOption,\n  OperationOption,\n  optionFilter,\n} from 'utils/helpers/apiSelection';\nimport {\n  parseApiSpec,\n  getOperationIds,\n  getResponseCodes,\n  OpenApiOperation,\n  getRequestSchema,\n  getResponseSchema,\n} from 'utils/helpers/swaggerParser';\nimport { flatten } from 'flat';\nimport MappingTest from 'components/MappingTest';\nimport generateAdapter from 'services/adapterservice';\nimport downloadFile from 'utils/helpers/download';\nimport InfoModal from 'components/InfoModal';\nimport ActionBar from 'components/ActionBar';\nimport { Schema } from 'utils/helpers/schemaHelpers';\n\nfunction OpenApiMappingCreator(): ReactElement {\n  const { authState } = useContext(AuthContext);\n\n  const [error, setError] = useState<string>();\n\n  // #region Load Apis\n  const [apiOptions, setApiOptions] = useState<ApiOption[]>([]);\n\n  const loadApis = useCallback(async (type: ApiType) => {\n    try {\n      const loadedApis = await getApis(type, true);\n\n      setApiOptions(\n        loadedApis.map((api) => ({\n          value: api,\n          label: api.name,\n        })),\n      );\n    } catch (err) {\n      console.log('Error loading apis', err);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadApis(ApiType.OPEN_API);\n  }, [loadApis]);\n  // #endregion\n\n  // #region Operation selections\n  const [partialSourceOperation, setPartialSourceOperation] = useState<\n    Partial<OpenApiOperation>\n  >();\n  const sourceOperation = useMemo<OpenApiOperation | undefined>(() => {\n    if (isValidOperation(partialSourceOperation)) {\n      return partialSourceOperation;\n    }\n\n    return undefined;\n  }, [partialSourceOperation]);\n\n  const [targetOperations, setTargetOperations] = useState<\n    Record<string, OpenApiOperation>\n  >();\n\n  const [sourceRequestSchema, sourceResponseSchema] = useMemo<\n    [Record<string, Schema>, Record<string, Schema>]\n  >(() => {\n    if (!sourceOperation || !sourceOperation.api.apiObject) {\n      return [{}, {}];\n    }\n\n    const requestSchema = {\n      [getId(sourceOperation)]:\n        getRequestSchema(\n          sourceOperation.api.apiObject,\n          sourceOperation.operationId,\n        ) ?? {},\n    };\n\n    const responseSchema = {\n      [getId(sourceOperation)]:\n        getResponseSchema(\n          sourceOperation.api.apiObject,\n          sourceOperation.operationId,\n          sourceOperation.responseId,\n        ) ?? {},\n    };\n\n    return [requestSchema, responseSchema];\n  }, [sourceOperation]);\n\n  const [targetRequestSchema, targetResponseSchema] = useMemo<\n    [Record<string, Schema>, Record<string, Schema>]\n  >(() => {\n    if (!targetOperations) {\n      return [{}, {}];\n    }\n\n    return Object.entries(targetOperations).reduce<\n      [Record<string, Schema>, Record<string, Schema>]\n    >(\n      ([requestSchema, responseSchema], [key, operation]) => {\n        const { api, operationId, responseId } = operation;\n\n        if (!api.apiObject) {\n          return [requestSchema, responseSchema];\n        }\n\n        const reqSchema = getRequestSchema(api.apiObject, operationId);\n        const respSchema = getResponseSchema(\n          api.apiObject,\n          operationId,\n          responseId,\n        );\n\n        if (!reqSchema || !respSchema) {\n          return [requestSchema, responseSchema];\n        }\n\n        return [\n          {\n            ...requestSchema,\n            [key]: reqSchema,\n          },\n          {\n            ...responseSchema,\n            [key]: respSchema,\n          },\n        ];\n      },\n      [{}, {}],\n    );\n  }, [targetOperations]);\n  // #endregion\n\n  // #region Mapping pairs\n  const [requestMappingPairs, setRequestMappingPairs] = useState<MappingPair[]>(\n    [],\n  );\n  const [responseMappingPairs, setResponseMappingPairs] = useState<\n    MappingPair[]\n  >([]);\n\n  const [\n    updatedRequestMappingPairState,\n    setUpdatedRequestMappingPairState,\n  ] = useState<{\n    mappingPairs: MappingPair[];\n    preventUpdate?: boolean;\n  }>({\n    mappingPairs: [],\n  });\n\n  const [\n    updatedResponseMappingPairState,\n    setUpdatedResponseMappingPairState,\n  ] = useState<{\n    mappingPairs: MappingPair[];\n    preventUpdate?: boolean;\n  }>({\n    mappingPairs: [],\n  });\n  // #endregion\n\n  // #region Mapping initialization\n  useEffect(() => {\n    async function initializeMapping() {\n      if (!sourceOperation || !targetOperations) {\n        return;\n      }\n\n      const mappingResult = await generateMapping(\n        sourceOperation,\n        targetOperations,\n      );\n\n      setRequestMappingPairs(mappingResult.mappingPairs.request);\n      setResponseMappingPairs(mappingResult.mappingPairs.response);\n    }\n\n    initializeMapping();\n  }, [sourceOperation, targetOperations]);\n  // #endregion\n\n  // #region Attribute mapping recomputation\n  const updateAttributeMapping = useCallback(async () => {\n    if (!sourceOperation || !targetOperations) {\n      return;\n    }\n\n    const combinedMappingPairs = [\n      ...requestMappingPairs,\n      ...responseMappingPairs,\n    ];\n    const result = await recomputeAttributeMapping(\n      sourceOperation,\n      targetOperations,\n      combinedMappingPairs,\n    );\n\n    setUpdatedRequestMappingPairState((currentState) => {\n      const currentMappingPairs = currentState.mappingPairs;\n\n      const currentMappingPairAttributeIds = currentMappingPairs.map(\n        (mappingPair) => mappingPair.requiredAttributeId,\n      );\n\n      // Filter out all already existing mapping pairs\n      const filteredMappingPairs = result.mappingPairs.request.filter(\n        (mappingPair) => {\n          return !currentMappingPairAttributeIds.includes(\n            mappingPair.requiredAttributeId,\n          );\n        },\n      );\n\n      return {\n        mappingPairs: [...currentMappingPairs, ...filteredMappingPairs],\n        preventUpdate: true,\n      };\n    });\n\n    setUpdatedResponseMappingPairState((currentState) => {\n      const currentMappingPairs = currentState.mappingPairs;\n\n      const currentMappingPairAttributeIds = currentMappingPairs.map(\n        (mappingPair) => mappingPair.requiredAttributeId,\n      );\n\n      // Filter out all already existing mapping pairs\n      const filteredMappingPairs = result.mappingPairs.response.filter(\n        (mappingPair) => {\n          return !currentMappingPairAttributeIds.includes(\n            mappingPair.requiredAttributeId,\n          );\n        },\n      );\n\n      return {\n        mappingPairs: [...currentMappingPairs, ...filteredMappingPairs],\n        preventUpdate: true,\n      };\n    });\n  }, [\n    requestMappingPairs,\n    responseMappingPairs,\n    sourceOperation,\n    targetOperations,\n  ]);\n\n  useEffect(() => {\n    if (!updatedRequestMappingPairState.preventUpdate) {\n      updateAttributeMapping();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updatedRequestMappingPairState]);\n\n  useEffect(() => {\n    if (!updatedResponseMappingPairState.preventUpdate) {\n      updateAttributeMapping();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updatedResponseMappingPairState]);\n  // #endregion\n\n  // #region Strict mode\n  const [strictEnabled, setStrictEnabled] = useState<boolean>(true);\n  // #endregion\n\n  // #region Determine current mapping validity\n  const isValid = useMemo(() => {\n    if (!targetRequestSchema || !sourceResponseSchema) {\n      return false;\n    }\n\n    const combinedMappingPairs = [\n      ...updatedRequestMappingPairState.mappingPairs,\n      ...updatedResponseMappingPairState.mappingPairs,\n    ];\n\n    if (\n      combinedMappingPairs.some(\n        (mappingPair) => !mappingPair.mappingTransformation,\n      )\n    ) {\n      return false;\n    }\n\n    const flatTargetRequest = Object.keys(flatten(targetRequestSchema));\n    const flatRequestMapping = Object.keys(\n      flatten(pairs2Trans(updatedRequestMappingPairState.mappingPairs)),\n    );\n\n    const flatSourceResponse = Object.keys(flatten(sourceResponseSchema));\n    const flatResponseMapping = Object.keys(\n      flatten(pairs2Trans(updatedResponseMappingPairState.mappingPairs)),\n    );\n\n    const missingRequest = flatTargetRequest.filter(\n      (attributeId) => !flatRequestMapping.includes(attributeId),\n    );\n    const missingResponse = flatSourceResponse.filter(\n      (attributeId) => !flatResponseMapping.includes(attributeId),\n    );\n\n    return missingRequest.length === 0 && missingResponse.length === 0;\n  }, [\n    sourceResponseSchema,\n    targetRequestSchema,\n    updatedRequestMappingPairState.mappingPairs,\n    updatedResponseMappingPairState.mappingPairs,\n  ]);\n  // #endregion\n\n  // #region Interaction handlers\n  const [saving, setSaving] = useState<boolean>(false);\n  const handleSaveMapping = useCallback(async () => {\n    if (\n      !isValid ||\n      !strictEnabled ||\n      !authState.user?.id ||\n      !sourceOperation ||\n      !targetOperations\n    ) {\n      return;\n    }\n\n    setSaving(true);\n\n    const mapping: OpenApiMappingModel = {\n      apiType: ApiType.OPEN_API,\n      type: MappingType.TRANSFORMATION,\n      createdBy: authState.user.id,\n      sourceId: getId(sourceOperation),\n      targetIds: Object.keys(targetOperations),\n      requestMapping: JSON.stringify(\n        pairs2Trans(updatedRequestMappingPairState.mappingPairs),\n      ),\n      responseMapping: JSON.stringify(\n        pairs2Trans(updatedResponseMappingPairState.mappingPairs),\n      ),\n    };\n\n    try {\n      await createMapping(mapping);\n    } catch (err) {\n      console.log(err);\n      setError('An error occurred');\n    } finally {\n      setSaving(false);\n    }\n  }, [\n    authState,\n    sourceOperation,\n    strictEnabled,\n    isValid,\n    targetOperations,\n    updatedRequestMappingPairState.mappingPairs,\n    updatedResponseMappingPairState.mappingPairs,\n  ]);\n\n  const [adapterCreating, setAdapterCreating] = useState<boolean>(false);\n  const handleCreateAdapter = useCallback(async () => {\n    if (!authState.user?.id || !sourceOperation || !targetOperations) {\n      return;\n    }\n\n    setAdapterCreating(true);\n\n    const mapping: OpenApiMappingModel = {\n      apiType: ApiType.OPEN_API,\n      type: MappingType.TRANSFORMATION,\n      createdBy: authState.user.id,\n      sourceId: getId(sourceOperation),\n      targetIds: Object.keys(targetOperations),\n      requestMapping: JSON.stringify(\n        pairs2Trans(updatedRequestMappingPairState.mappingPairs),\n      ),\n      responseMapping: JSON.stringify(\n        pairs2Trans(updatedResponseMappingPairState.mappingPairs),\n      ),\n    };\n\n    try {\n      const downloadLink = await generateAdapter(mapping, 'javascript');\n\n      downloadFile(downloadLink, 'adapter.zip');\n    } catch (err) {\n      console.log(err);\n      setError('An error occurred');\n    } finally {\n      setAdapterCreating(false);\n    }\n  }, [\n    authState,\n    sourceOperation,\n    targetOperations,\n    updatedRequestMappingPairState.mappingPairs,\n    updatedResponseMappingPairState.mappingPairs,\n  ]);\n\n  const handleClear = useCallback(() => {\n    setPartialSourceOperation(undefined);\n    setTargetOperations(undefined);\n    setRequestMappingPairs([]);\n    setResponseMappingPairs([]);\n  }, []);\n  // #endregion\n\n  return (\n    <div className=\"w-11/12 flex flex-col pb-8\">\n      <InfoModal\n        isOpen={error !== undefined}\n        onDismiss={() => setError(undefined)}\n        header=\"Error\"\n        message={error ?? ''}\n      />\n\n      {/* API selection */}\n      <div className=\"flex -mx-1\">\n        <div className=\"w-1/2 px-1 flex flex-col justify-between\">\n          <p className=\"font-bold\">Source</p>\n          <SingleSelection\n            apiOptions={apiOptions}\n            operation={partialSourceOperation}\n            setOperation={setPartialSourceOperation}\n          />\n        </div>\n        <div className=\"w-1/2 px-1 flex flex-col\">\n          <p className=\"font-bold\">Targets</p>\n          <MultiSelection\n            apiOptions={apiOptions}\n            operations={targetOperations}\n            setOperations={setTargetOperations}\n            sourceOperation={sourceOperation}\n          />\n        </div>\n      </div>\n\n      {/* Request */}\n      <MappingContextProvider>\n        <MappingContainer\n          title=\"Request\"\n          required=\"target\"\n          strict={strictEnabled}\n          mappingPairs={requestMappingPairs}\n          onMappingPairsChange={(mappingPairs) => {\n            setUpdatedRequestMappingPairState({\n              mappingPairs,\n            });\n          }}\n          sourceSchema={sourceRequestSchema}\n          targetSchema={targetRequestSchema}\n        />\n      </MappingContextProvider>\n\n      {/* Response */}\n      <MappingContextProvider>\n        <MappingContainer\n          title=\"Response\"\n          required=\"source\"\n          strict={strictEnabled}\n          mappingPairs={responseMappingPairs}\n          onMappingPairsChange={(mappingPairs) =>\n            setUpdatedResponseMappingPairState({\n              mappingPairs,\n            })\n          }\n          sourceSchema={sourceResponseSchema}\n          targetSchema={targetResponseSchema}\n        />\n      </MappingContextProvider>\n\n      {/* Testing */}\n      <MappingTest\n        requestMappingPairs={updatedRequestMappingPairState.mappingPairs}\n        responseMappingPairs={updatedResponseMappingPairState.mappingPairs}\n        sourceRequestSchema={sourceRequestSchema}\n        targetOperations={targetOperations}\n      />\n\n      {/* Bottom bar */}\n      <ActionBar\n        adapterCreating={adapterCreating}\n        saving={saving}\n        mappingValid={isValid}\n        strict={strictEnabled}\n        toggleStrict={() => setStrictEnabled((curr) => !curr)}\n        onClear={handleClear}\n        onSave={handleSaveMapping}\n        onCreateAdapter={handleCreateAdapter}\n      />\n    </div>\n  );\n}\n\n// #region Single Operation selection\ninterface SingleSelectionProps {\n  apiOptions: ApiOption[];\n  operation: Partial<OpenApiOperation> | undefined;\n  setOperation: (operation?: Partial<OpenApiOperation>) => void;\n  sourceOperation?: OpenApiOperation;\n}\nfunction SingleSelection(props: SingleSelectionProps) {\n  const { operation, setOperation, apiOptions, sourceOperation } = props;\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  // #region Selected parts\n  const [selectedApi, setSelectedApi] = useState<OpenApiModel>();\n  const [selectedOperation, setSelectedOperation] = useState<string>();\n  const [selectedResponse, setSelectedResponse] = useState<string>();\n  // #endregion\n\n  // #region Selection states\n  const [selectedApiOption, setSelectedApiOption] = useState<ApiOption | null>(\n    null,\n  );\n  const [\n    selectedOperationOption,\n    setSelectedOperationOption,\n  ] = useState<OperationOption | null>(null);\n  const [\n    selectedResponseOption,\n    setSelectedResponseOption,\n  ] = useState<ResponseOption | null>(null);\n  // #endregion\n\n  // #region Selection options\n  const [operationOptions, setOperationOptions] = useState<OperationOption[]>(\n    [],\n  );\n  const [responseOptions, setResponseOptions] = useState<ResponseOption[]>([]);\n  // #endregion\n\n  // #region Load options\n  const loadFullApi = useCallback(async (apiId: string): Promise<\n    OpenApiModel | undefined\n  > => {\n    try {\n      const apiData = await getApi<OpenApiModel>(apiId, false);\n      apiData.apiObject = await parseApiSpec(apiData.apiSpec);\n\n      return apiData;\n    } catch (err) {\n      console.log(err);\n      return undefined;\n    }\n  }, []);\n\n  const loadOperationOptions = useCallback(\n    async (api: OpenApiModel, srcOperation?: OpenApiOperation) => {\n      if (!api.apiObject) {\n        return [];\n      }\n\n      let mappedOperations: MappedOperations = [];\n      if (srcOperation) {\n        mappedOperations = await getMappedOperations(\n          ApiType.OPEN_API,\n          getId(srcOperation),\n          api.id,\n        );\n      }\n\n      const operationIds = getOperationIds(api.apiObject);\n      const options = operationIds\n        .map((operationId) => {\n          const alreadyMapped = mappedOperations.some(\n            (op) => op.operationId === operationId,\n          );\n\n          return {\n            alreadyMapped,\n            operationId,\n          };\n        })\n        .sort((a, b) => {\n          if (a.alreadyMapped && !b.alreadyMapped) {\n            return -1;\n          }\n\n          if (!a.alreadyMapped && b.alreadyMapped) {\n            return 1;\n          }\n\n          return 0;\n        })\n        .map<OperationOption>(({ alreadyMapped, operationId }) => {\n          return {\n            label: `${alreadyMapped ? '* ' : ''}${operationId}`,\n            value: { operationId },\n          };\n        });\n\n      return options;\n    },\n    [],\n  );\n\n  const loadResponseOptions = useCallback(\n    (api: OpenApiModel, operationId: string) => {\n      if (!api.apiObject) {\n        return [];\n      }\n\n      const responseCodes = getResponseCodes(api.apiObject, operationId);\n      const options = responseCodes.map<ResponseOption>((responseCode) => ({\n        label: responseCode,\n        value: { responseId: responseCode },\n      }));\n\n      return options;\n    },\n    [],\n  );\n  // #endregion\n\n  // #region Handle operation prop change\n  useEffect(() => {\n    async function initialize() {\n      setLoading(true);\n\n      if (!operation) {\n        setSelectedApi(undefined);\n        setSelectedApiOption(null);\n\n        setSelectedOperation(undefined);\n        setOperationOptions([]);\n        setSelectedOperationOption(null);\n\n        setSelectedResponse(undefined);\n        setResponseOptions([]);\n        setSelectedResponseOption(null);\n\n        setLoading(false);\n        return;\n      }\n\n      let api = selectedApi;\n      let operOptions: OperationOption[] = operationOptions;\n      let respOptions: ResponseOption[] = responseOptions;\n\n      if (selectedApi !== operation.api) {\n        const apiOption = apiOptions.find(\n          (option) => option.value.id === operation.api?.id,\n        );\n        api = apiOption && (await loadFullApi(apiOption.value.id));\n\n        setSelectedApi(api);\n        setSelectedApiOption(apiOption ?? null);\n        operOptions = api ? await loadOperationOptions(api) : [];\n        setOperationOptions(operOptions);\n      }\n\n      if (selectedOperation !== operation.operationId) {\n        const operationOption = operOptions.find(\n          (option) => option.value.operationId === operation.operationId,\n        );\n\n        setSelectedOperation(operation.operationId);\n        setSelectedOperationOption(operationOption ?? null);\n        respOptions =\n          api && operation.operationId\n            ? await loadResponseOptions(api, operation.operationId)\n            : [];\n        setResponseOptions(respOptions);\n      }\n\n      if (selectedResponse !== operation.responseId) {\n        const responseOption = respOptions.find(\n          (option) => option.value.responseId === operation.responseId,\n        );\n\n        setSelectedResponse(operation.responseId);\n        setSelectedResponseOption(responseOption ?? null);\n      }\n\n      setLoading(false);\n    }\n\n    initialize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [operation]);\n  // #endregion\n\n  // #region Handle manual api change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    // Reset other selections\n    setSelectedOperationOption(null);\n    setSelectedResponseOption(null);\n\n    if (selectedApiOption) {\n      loadFullApi(selectedApiOption?.value.id).then(setSelectedApi);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedApiOption]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    if (selectedApi) {\n      loadOperationOptions(selectedApi, sourceOperation).then(\n        setOperationOptions,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sourceOperation, selectedApi]);\n  // #endregion\n\n  // #region Handle manual operation change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    // Reset other selections\n    setSelectedResponseOption(null);\n\n    setSelectedOperation(selectedOperationOption?.value.operationId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedOperationOption]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    if (selectedApi && selectedOperation) {\n      const options = loadResponseOptions(selectedApi, selectedOperation);\n      setResponseOptions(options);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedOperation]);\n  // #endregion\n\n  // #region Handle manual response change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    setSelectedResponse(selectedResponseOption?.value.responseId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedResponseOption]);\n  // #endregion\n\n  // #region Emit changed operation\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    if (!selectedApi && !selectedOperation && !selectedResponse) {\n      setOperation(undefined);\n      return;\n    }\n\n    setOperation({\n      api: selectedApi,\n      operationId: selectedOperation,\n      responseId: selectedResponse,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedApi, selectedOperation, selectedResponse]);\n  // #endregion\n\n  return (\n    <div className=\"flex flex-col\">\n      <Select\n        className=\"w-full\"\n        value={selectedApiOption}\n        isSearchable\n        isClearable\n        onChange={(value) => setSelectedApiOption(value ?? null)}\n        options={apiOptions}\n        filterOption={optionFilter}\n      />\n      <div className=\"w-full flex mt-2\">\n        <Select\n          className=\"w-full\"\n          value={selectedOperationOption}\n          isSearchable\n          onChange={(value) => setSelectedOperationOption(value ?? null)}\n          options={operationOptions}\n        />\n        <Select\n          className=\"ml-2 w-1/3\"\n          value={selectedResponseOption}\n          isSearchable\n          onChange={(value) => setSelectedResponseOption(value ?? null)}\n          options={responseOptions}\n        />\n      </div>\n    </div>\n  );\n}\n// #endregion\n\n// #region Multi Operation Selection\ninterface MultiSelectionProps {\n  apiOptions: ApiOption[];\n  operations: Record<string, OpenApiOperation> | undefined;\n  setOperations: React.Dispatch<\n    React.SetStateAction<Record<string, OpenApiOperation> | undefined>\n  >;\n  sourceOperation?: OpenApiOperation;\n}\nfunction MultiSelection(props: MultiSelectionProps) {\n  const { apiOptions, operations, setOperations, sourceOperation } = props;\n\n  // #region Selection & update management\n  const [\n    selectedOperation,\n    setSelectedOperation,\n  ] = useState<OpenApiOperation>();\n  const [partialSelectedOperation, setPartialSelectedOperation] = useState<\n    Partial<OpenApiOperation>\n  >();\n\n  useEffect(() => {\n    if (\n      !isValidOperation(partialSelectedOperation) ||\n      operationEquals(partialSelectedOperation, selectedOperation)\n    ) {\n      return;\n    }\n\n    if (selectedOperation === undefined) {\n      addOperation(partialSelectedOperation);\n      return;\n    }\n\n    replaceOperation(selectedOperation, partialSelectedOperation);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partialSelectedOperation]);\n  // #endregion\n\n  // #region Manage operations\n  const addOperation = useCallback(\n    (operation: OpenApiOperation) => {\n      setOperations((currentOperations) => ({\n        ...currentOperations,\n        [getId(operation)]: operation,\n      }));\n\n      setSelectedOperation(operation);\n      setPartialSelectedOperation(operation);\n    },\n    [setOperations],\n  );\n\n  const replaceOperation = useCallback(\n    (oldOperation: OpenApiOperation, newOperation: OpenApiOperation) => {\n      setOperations((currentOperations) => {\n        if (!currentOperations) {\n          return undefined;\n        }\n\n        return Object.entries(currentOperations).reduce(\n          (newOperations, [id, operation]) => {\n            if (getId(oldOperation) === id) {\n              return {\n                ...newOperations,\n                [getId(newOperation)]: newOperation,\n              };\n            }\n\n            return {\n              ...newOperations,\n              [id]: operation,\n            };\n          },\n          {},\n        );\n      });\n\n      setSelectedOperation(newOperation);\n      setPartialSelectedOperation(newOperation);\n    },\n    [setOperations],\n  );\n\n  const removeOperation = useCallback(\n    (operation: OpenApiOperation) => {\n      setOperations((currentOperations) => {\n        const { [getId(operation)]: deleted, ...rest } =\n          currentOperations ?? {};\n\n        return rest;\n      });\n\n      if (selectedOperation === operation) {\n        setSelectedOperation(undefined);\n        setPartialSelectedOperation(undefined);\n      }\n    },\n    [setOperations, selectedOperation, setSelectedOperation],\n  );\n  // #endregion\n\n  // #region Handle clear\n  useEffect(() => {\n    if (!operations) {\n      setSelectedOperation(undefined);\n      setPartialSelectedOperation(undefined);\n    }\n  }, [operations]);\n  // #endregion\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"flex overflow-x-auto\">\n        {operations &&\n          Object.values(operations).map((operation) => (\n            <button\n              key={getId(operation)}\n              type=\"button\"\n              className=\"chip mx-1\"\n              onClick={() => {\n                setSelectedOperation(operation);\n                setPartialSelectedOperation(operation);\n              }}\n            >\n              {operation.api.name}\n              <div className=\"border-l ml-2 pl-2 flex items-center\">\n                <ClearIcon\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeOperation(operation);\n                  }}\n                  className=\"h-4 w-4\"\n                />\n              </div>\n            </button>\n          ))}\n        <button\n          type=\"button\"\n          className=\"chip border-dashed mx-1 h-8\"\n          onClick={() => {\n            setSelectedOperation(undefined);\n            setPartialSelectedOperation(undefined);\n          }}\n        >\n          <AddIcon className=\"h-4 w-4\" />\n        </button>\n      </div>\n      <div className=\"mt-2\">\n        <SingleSelection\n          key=\"default\"\n          apiOptions={apiOptions}\n          operation={partialSelectedOperation}\n          setOperation={setPartialSelectedOperation}\n          sourceOperation={sourceOperation}\n        />\n      </div>\n    </div>\n  );\n}\n// #endregion\n\n// #region Helper\nfunction getId(operation?: OpenApiOperation): string {\n  if (!operation) {\n    return '';\n  }\n  return `${operation.api.id}_${operation.operationId}_${operation.responseId}`;\n}\n\nfunction isValidOperation(\n  operation: Partial<OpenApiOperation> | undefined,\n): operation is OpenApiOperation {\n  return (\n    operation !== undefined &&\n    operation.api !== undefined &&\n    operation.operationId !== undefined &&\n    operation.responseId !== undefined\n  );\n}\n\nfunction operationEquals(a?: OpenApiOperation, b?: OpenApiOperation) {\n  return (\n    a !== undefined &&\n    b !== undefined &&\n    a.api.id === b.api.id &&\n    a.operationId === b.operationId &&\n    a.responseId === b.responseId\n  );\n}\n// #endregion\n\nexport default OpenApiMappingCreator;\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/pages/AsyncApiMappingCreator.tsx",["304","305","306","307"],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/asyncApiParser.ts",["308"],"import AsyncApiParser, {\n  AsyncAPIDocument,\n  Channel,\n  PublishOperation,\n  SubscribeOperation,\n} from '@asyncapi/parser';\nimport { AsyncApiModel } from 'models/ApiModel';\nimport { Schema, removeTypes, flattenSchema } from './schemaHelpers';\n\n// #region Types & constants\nexport type AsyncApiOperation = {\n  api: AsyncApiModel;\n  operationId: string;\n};\n\n// #endregion\n\nexport async function parseApiSpec(apiSpec: string): Promise<AsyncAPIDocument> {\n  return AsyncApiParser.parse(apiSpec);\n}\n\n// #region Get operations details\nfunction getOperation(\n  apiObject: AsyncAPIDocument,\n  operationId: string,\n  mode: 'publish' | 'subscribe' | 'any',\n):\n  | {\n      pathUrl: string;\n      channel: Channel;\n      operation: PublishOperation | SubscribeOperation;\n    }\n  | undefined {\n  const paths = apiObject.channelNames();\n\n  const operations = paths\n    .map((path) => ({\n      path,\n      channel: apiObject.channel(path),\n    }))\n    .flatMap(({ path, channel }) => {\n      const result = [];\n      if (mode !== 'subscribe' && channel.hasPublish()) {\n        result.push({\n          pathUrl: path,\n          channel,\n          operation: channel.publish(),\n        });\n      }\n      if (mode !== 'publish' && channel.hasPublish()) {\n        result.push({\n          pathUrl: path,\n          channel,\n          operation: channel.subscribe(),\n        });\n      }\n\n      return result;\n    });\n\n  return operations.find(({ operation }) => operation.id() === operationId);\n}\n\nexport function getOperationIds(\n  apiObject: AsyncApiParser.AsyncAPIDocument,\n  mode: 'publish' | 'subscribe' | 'any',\n): string[] {\n  return apiObject\n    .channelNames()\n    .map((path) => apiObject.channel(path))\n    .flatMap((channel) => {\n      const result = [];\n      if (mode !== 'subscribe' && channel.hasPublish()) {\n        result.push(channel.publish());\n      }\n\n      if (mode !== 'publish' && channel.hasSubscribe()) {\n        result.push(channel.subscribe());\n      }\n\n      return result;\n    })\n    .map((operation) => operation.id());\n}\n// #endregion\n\n// #region Get server details\nexport function getServers(apiObject: AsyncAPIDocument): string[] | undefined {\n  const servers = Object.values(apiObject.servers());\n\n  if (servers.length === 0) {\n    return undefined;\n  }\n\n  return servers.map((server) => {\n    return Object.entries(server.variables() || []).reduce(\n      (url, [varname, value]) =>\n        url.replace(new RegExp(`{${varname}}`, 'g'), value.defaultValue()),\n      server.url(),\n    );\n  });\n}\n// #endregion\n\n// #region Message Schema\nexport function getMessageSchema(\n  apiObject: AsyncAPIDocument,\n  operationId: string,\n): Schema | undefined {\n  const result = getOperation(apiObject, operationId, 'any');\n\n  if (result === undefined) {\n    return undefined;\n  }\n\n  const { channel, operation } = result;\n\n  const message = operation.message();\n\n  const parameters = Object.entries(channel.parameters()).reduce(\n    (params, [paramName, parameter]) => ({\n      ...params,\n      [paramName]: removeTypes(flattenSchema(parameter.json())),\n    }),\n    {},\n  );\n\n  const headerJSON = message.headers()?.json();\n  const headers = headerJSON ? removeTypes(flattenSchema(headerJSON)) : {};\n\n  const payloadJSON = message.payload()?.json();\n  const payload = payloadJSON ? removeTypes(flattenSchema(payloadJSON)) : {};\n\n  return {\n    ...(channel.hasParameters() ? { parameters } : null),\n    ...(Object.keys(headers).length > 0 ? { headers } : null),\n    ...(Object.keys(payload).length > 0 ? { payload } : null),\n  };\n}\n// #endregion\n\n// #region Request URL\nexport function getRequestUrl(\n  apiObject: AsyncAPIDocument,\n  operationId: string,\n  paramValues: Record<string, string> = {},\n): string | undefined {\n  const servers = getServers(apiObject);\n  const operationResult = getOperation(apiObject, operationId, 'any');\n  console.log(servers, apiObject, operationId, operationResult);\n\n  if (!servers || servers.length === 0 || !operationResult) {\n    return undefined;\n  }\n\n  const { pathUrl, channel } = operationResult;\n  const server = servers[0];\n\n  // Get all required parameters\n  const parameters = channel.hasParameters()\n    ? Object.keys(channel.parameters())\n    : [];\n\n  const urlWithParams = parameters.reduce(\n    (currUrl, currParam) =>\n      currUrl.replace(\n        new RegExp(`{${currParam}}`, 'g'),\n        paramValues[currParam] || '',\n      ),\n    pathUrl,\n  );\n\n  return `${server}${urlWithParams}`;\n}\n// #endregion\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/components/ActionBar.tsx",[],"/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/helpers/schemaHelpers.ts",["309","310","311","312","313","314","315"],"export type Schema =\n  | {\n      [key: string]: string | Schema;\n    }\n  | [Schema];\n\nexport function removeTypes(schema: any): Schema {\n  if (schema.type === 'object') {\n    return Object.entries(schema.properties).reduce(\n      (obj, [key, value]) => ({\n        ...obj,\n        [key]: removeTypes(value),\n      }),\n      {},\n    );\n  }\n\n  if (schema.type === 'array') {\n    return [removeTypes(schema.items)];\n  }\n\n  return schema.type;\n}\n\nexport function flattenSchema(schema: any): any {\n  if (schema.allOf !== undefined) {\n    const combinedObject = {\n      type: 'object',\n      properties: schema.allOf.reduce(\n        (obj: any, subSchema: any) => ({\n          ...obj,\n          ...flattenSchema(subSchema).properties,\n        }),\n        {},\n      ),\n    };\n\n    return combinedObject;\n  }\n  return schema;\n}\n","/Users/dev/Documents/InES/CKDAC/Frontend_v2/src/utils/hooks/usePrompt.tsx",["316"],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","replacedBy":"326"},{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","severity":1,"message":"330","line":47,"column":7,"nodeType":"331","messageId":"332","endLine":47,"endColumn":18},{"ruleId":"333","severity":1,"message":"334","line":7,"column":13,"nodeType":"335","messageId":"336","endLine":7,"endColumn":16,"suggestions":"337"},{"ruleId":"338","severity":1,"message":"339","line":6,"column":10,"nodeType":"340","messageId":"341","endLine":6,"endColumn":17},{"ruleId":"329","severity":1,"message":"330","line":30,"column":5,"nodeType":"331","messageId":"332","endLine":30,"endColumn":16},{"ruleId":"329","severity":1,"message":"330","line":39,"column":5,"nodeType":"331","messageId":"332","endLine":39,"endColumn":16},{"ruleId":"329","severity":1,"message":"330","line":48,"column":5,"nodeType":"331","messageId":"332","endLine":48,"endColumn":16},{"ruleId":"329","severity":1,"message":"330","line":91,"column":5,"nodeType":"331","messageId":"332","endLine":91,"endColumn":16},{"ruleId":"329","severity":1,"message":"330","line":46,"column":7,"nodeType":"331","messageId":"332","endLine":46,"endColumn":18},{"ruleId":"333","severity":1,"message":"334","line":39,"column":65,"nodeType":"335","messageId":"336","endLine":39,"endColumn":68,"suggestions":"342"},{"ruleId":"338","severity":1,"message":"343","line":2,"column":10,"nodeType":"340","messageId":"341","endLine":2,"endColumn":19},{"ruleId":"338","severity":1,"message":"344","line":4,"column":10,"nodeType":"340","messageId":"341","endLine":4,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":69,"column":7,"nodeType":"331","messageId":"332","endLine":69,"endColumn":18},{"ruleId":"345","severity":1,"message":"346","line":55,"column":41,"nodeType":"347","messageId":"348","endLine":55,"endColumn":49},{"ruleId":"329","severity":1,"message":"330","line":63,"column":7,"nodeType":"331","messageId":"332","endLine":63,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":79,"column":9,"nodeType":"331","messageId":"332","endLine":79,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":116,"column":9,"nodeType":"331","messageId":"332","endLine":116,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":148,"column":7,"nodeType":"331","messageId":"332","endLine":148,"endColumn":18},{"ruleId":"333","severity":1,"message":"334","line":7,"column":10,"nodeType":"335","messageId":"336","endLine":7,"endColumn":13,"suggestions":"349"},{"ruleId":"333","severity":1,"message":"334","line":8,"column":21,"nodeType":"335","messageId":"336","endLine":8,"endColumn":24,"suggestions":"350"},{"ruleId":"333","severity":1,"message":"334","line":13,"column":28,"nodeType":"335","messageId":"336","endLine":13,"endColumn":31,"suggestions":"351"},{"ruleId":"352","severity":1,"message":"353","line":9,"column":3,"nodeType":"340","messageId":"354","endLine":9,"endColumn":14},{"ruleId":"333","severity":1,"message":"334","line":9,"column":11,"nodeType":"335","messageId":"336","endLine":9,"endColumn":14,"suggestions":"355"},{"ruleId":"333","severity":1,"message":"334","line":203,"column":51,"nodeType":"335","messageId":"336","endLine":203,"endColumn":54,"suggestions":"356"},{"ruleId":"333","severity":1,"message":"334","line":232,"column":51,"nodeType":"335","messageId":"336","endLine":232,"endColumn":54,"suggestions":"357"},{"ruleId":"329","severity":1,"message":"330","line":332,"column":3,"nodeType":"331","messageId":"332","endLine":332,"endColumn":14},{"ruleId":"333","severity":1,"message":"334","line":375,"column":27,"nodeType":"335","messageId":"336","endLine":375,"endColumn":30,"suggestions":"358"},{"ruleId":"352","severity":1,"message":"359","line":1,"column":28,"nodeType":"340","messageId":"354","endLine":1,"endColumn":43},{"ruleId":"333","severity":1,"message":"334","line":1,"column":40,"nodeType":"335","messageId":"336","endLine":1,"endColumn":43,"suggestions":"360"},{"ruleId":"333","severity":1,"message":"334","line":35,"column":50,"nodeType":"335","messageId":"336","endLine":35,"endColumn":53,"suggestions":"361"},{"ruleId":"333","severity":1,"message":"334","line":39,"column":52,"nodeType":"335","messageId":"336","endLine":39,"endColumn":55,"suggestions":"362"},{"ruleId":"333","severity":1,"message":"334","line":55,"column":48,"nodeType":"335","messageId":"336","endLine":55,"endColumn":51,"suggestions":"363"},{"ruleId":"333","severity":1,"message":"334","line":59,"column":48,"nodeType":"335","messageId":"336","endLine":59,"endColumn":51,"suggestions":"364"},{"ruleId":"345","severity":1,"message":"346","line":69,"column":13,"nodeType":"347","messageId":"348","endLine":69,"endColumn":63},{"ruleId":"333","severity":1,"message":"334","line":86,"column":33,"nodeType":"335","messageId":"336","endLine":86,"endColumn":36,"suggestions":"365"},{"ruleId":"345","severity":1,"message":"346","line":148,"column":28,"nodeType":"347","messageId":"348","endLine":148,"endColumn":48},{"ruleId":"345","severity":1,"message":"346","line":153,"column":13,"nodeType":"347","messageId":"348","endLine":153,"endColumn":33},{"ruleId":"345","severity":1,"message":"346","line":163,"column":13,"nodeType":"347","messageId":"348","endLine":163,"endColumn":34},{"ruleId":"345","severity":1,"message":"346","line":163,"column":13,"nodeType":"347","messageId":"348","endLine":163,"endColumn":23,"suggestions":"366"},{"ruleId":"345","severity":1,"message":"346","line":182,"column":13,"nodeType":"347","messageId":"348","endLine":182,"endColumn":34},{"ruleId":"345","severity":1,"message":"346","line":182,"column":13,"nodeType":"347","messageId":"348","endLine":182,"endColumn":23,"suggestions":"367"},{"ruleId":"345","severity":1,"message":"346","line":248,"column":28,"nodeType":"347","messageId":"348","endLine":248,"endColumn":48},{"ruleId":"345","severity":1,"message":"346","line":255,"column":13,"nodeType":"347","messageId":"348","endLine":255,"endColumn":34},{"ruleId":"345","severity":1,"message":"346","line":255,"column":13,"nodeType":"347","messageId":"348","endLine":255,"endColumn":23,"suggestions":"368"},{"ruleId":"329","severity":1,"message":"330","line":381,"column":7,"nodeType":"331","messageId":"332","endLine":381,"endColumn":18},{"ruleId":"317","replacedBy":"369"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","replacedBy":"326"},{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","severity":1,"message":"330","line":72,"column":7,"nodeType":"331","messageId":"332","endLine":72,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":379,"column":7,"nodeType":"331","messageId":"332","endLine":379,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":421,"column":7,"nodeType":"331","messageId":"332","endLine":421,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":578,"column":7,"nodeType":"331","messageId":"332","endLine":578,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":93,"column":7,"nodeType":"331","messageId":"332","endLine":93,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":392,"column":7,"nodeType":"331","messageId":"332","endLine":392,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":433,"column":7,"nodeType":"331","messageId":"332","endLine":433,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":601,"column":7,"nodeType":"331","messageId":"332","endLine":601,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":150,"column":3,"nodeType":"331","messageId":"332","endLine":150,"endColumn":14},{"ruleId":"352","severity":1,"message":"370","line":7,"column":29,"nodeType":"340","messageId":"354","endLine":7,"endColumn":40},{"ruleId":"333","severity":1,"message":"334","line":7,"column":37,"nodeType":"335","messageId":"336","endLine":7,"endColumn":40,"suggestions":"371"},{"ruleId":"352","severity":1,"message":"370","line":25,"column":31,"nodeType":"340","messageId":"354","endLine":25,"endColumn":42},{"ruleId":"333","severity":1,"message":"334","line":25,"column":39,"nodeType":"335","messageId":"336","endLine":25,"endColumn":42,"suggestions":"372"},{"ruleId":"333","severity":1,"message":"334","line":25,"column":45,"nodeType":"335","messageId":"336","endLine":25,"endColumn":48,"suggestions":"373"},{"ruleId":"333","severity":1,"message":"334","line":30,"column":15,"nodeType":"335","messageId":"336","endLine":30,"endColumn":18,"suggestions":"374"},{"ruleId":"333","severity":1,"message":"334","line":30,"column":31,"nodeType":"335","messageId":"336","endLine":30,"endColumn":34,"suggestions":"375"},{"ruleId":"333","severity":1,"message":"334","line":51,"column":42,"nodeType":"335","messageId":"336","endLine":51,"endColumn":45,"suggestions":"376"},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["377"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["378","379"],"@typescript-eslint/no-unused-vars","'getUser' is defined but never used.","Identifier","unusedVar",["380","381"],"'UserModel' is defined but never used.","'Redirect' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["382","383"],["384","385"],["386","387"],"@typescript-eslint/explicit-module-boundary-types","Argument 'option' should be typed with a non-any type.","anyTypedArg",["388","389"],["390","391"],["392","393"],["394","395"],"Argument 'jsonObject' should be typed with a non-any type.",["396","397"],["398","399"],["400","401"],["402","403"],["404","405"],["406","407"],["408"],["409"],["410"],[],"Argument 'schema' should be typed with a non-any type.",["411","412"],["413","414"],["415","416"],["417","418"],["419","420"],["421","422"],"padding-line-between-statements",{"messageId":"423","fix":"424","desc":"425"},{"messageId":"426","fix":"427","desc":"428"},{"messageId":"423","fix":"429","desc":"425"},{"messageId":"426","fix":"430","desc":"428"},{"messageId":"423","fix":"431","desc":"425"},{"messageId":"426","fix":"432","desc":"428"},{"messageId":"423","fix":"433","desc":"425"},{"messageId":"426","fix":"434","desc":"428"},{"messageId":"423","fix":"435","desc":"425"},{"messageId":"426","fix":"436","desc":"428"},{"messageId":"423","fix":"437","desc":"425"},{"messageId":"426","fix":"438","desc":"428"},{"messageId":"423","fix":"439","desc":"425"},{"messageId":"426","fix":"440","desc":"428"},{"messageId":"423","fix":"441","desc":"425"},{"messageId":"426","fix":"442","desc":"428"},{"messageId":"423","fix":"443","desc":"425"},{"messageId":"426","fix":"444","desc":"428"},{"messageId":"423","fix":"445","desc":"425"},{"messageId":"426","fix":"446","desc":"428"},{"messageId":"423","fix":"447","desc":"425"},{"messageId":"426","fix":"448","desc":"428"},{"messageId":"423","fix":"449","desc":"425"},{"messageId":"426","fix":"450","desc":"428"},{"messageId":"423","fix":"451","desc":"425"},{"messageId":"426","fix":"452","desc":"428"},{"messageId":"423","fix":"453","desc":"425"},{"messageId":"426","fix":"454","desc":"428"},{"messageId":"423","fix":"455","desc":"425"},{"messageId":"426","fix":"456","desc":"428"},{"messageId":"457","fix":"458","desc":"459"},{"messageId":"457","fix":"460","desc":"459"},{"messageId":"457","fix":"461","desc":"459"},{"messageId":"423","fix":"462","desc":"425"},{"messageId":"426","fix":"463","desc":"428"},{"messageId":"423","fix":"464","desc":"425"},{"messageId":"426","fix":"465","desc":"428"},{"messageId":"423","fix":"466","desc":"425"},{"messageId":"426","fix":"467","desc":"428"},{"messageId":"423","fix":"468","desc":"425"},{"messageId":"426","fix":"469","desc":"428"},{"messageId":"423","fix":"470","desc":"425"},{"messageId":"426","fix":"471","desc":"428"},{"messageId":"423","fix":"472","desc":"425"},{"messageId":"426","fix":"473","desc":"428"},"suggestUnknown",{"range":"474","text":"475"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"474","text":"476"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"477","text":"475"},{"range":"477","text":"476"},{"range":"478","text":"475"},{"range":"478","text":"476"},{"range":"479","text":"475"},{"range":"479","text":"476"},{"range":"480","text":"475"},{"range":"480","text":"476"},{"range":"481","text":"475"},{"range":"481","text":"476"},{"range":"482","text":"475"},{"range":"482","text":"476"},{"range":"483","text":"475"},{"range":"483","text":"476"},{"range":"484","text":"475"},{"range":"484","text":"476"},{"range":"485","text":"475"},{"range":"485","text":"476"},{"range":"486","text":"475"},{"range":"486","text":"476"},{"range":"487","text":"475"},{"range":"487","text":"476"},{"range":"488","text":"475"},{"range":"488","text":"476"},{"range":"489","text":"475"},{"range":"489","text":"476"},{"range":"490","text":"475"},{"range":"490","text":"476"},"suggestOptionalChain",{"range":"491","text":"492"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"493","text":"492"},{"range":"494","text":"492"},{"range":"495","text":"475"},{"range":"495","text":"476"},{"range":"496","text":"475"},{"range":"496","text":"476"},{"range":"497","text":"475"},{"range":"497","text":"476"},{"range":"498","text":"475"},{"range":"498","text":"476"},{"range":"499","text":"475"},{"range":"499","text":"476"},{"range":"500","text":"475"},{"range":"500","text":"476"},[246,249],"unknown","never",[1106,1109],[270,273],[295,298],[486,489],[151,154],[5341,5344],[6053,6056],[9533,9536],[39,42],[1096,1099],[1251,1254],[1715,1718],[1840,1843],[2700,2703],[4544,4545],"?",[5060,5061],[7154,7155],[122,125],[480,483],[486,489],[632,635],[648,651],[1211,1214]]